"""
Kafka Producer Client –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka
"""

import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from kafka import KafkaProducer
from kafka.errors import KafkaError


class KafkaProducerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka"""

    def __init__(
        self,
        bootstrap_servers: List[str] = None,
        client_id: str = "jira-kafka-producer",
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Producer

        Args:
            bootstrap_servers: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Kafka (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ['localhost:9092'])
            client_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è KafkaProducer
        """
        self.bootstrap_servers = bootstrap_servers or ['localhost:9092']
        self.client_id = client_id

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            'bootstrap_servers': self.bootstrap_servers,
            'client_id': self.client_id,
            'value_serializer': lambda x: json.dumps(x, ensure_ascii=False).encode('utf-8'),
            'key_serializer': lambda x: x.encode('utf-8') if x else None,
            'acks': 'all',  # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö —Ä–µ–ø–ª–∏–∫
            'retries': 3,   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            'retry_backoff_ms': 1000,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            'request_timeout_ms': 30000,  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            'compression_type': 'gzip',  # –°–∂–∞—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏
        config = {**default_config, **kwargs}

        try:
            self.producer = KafkaProducer(**config)
            self.logger.info(f"‚úÖ Kafka Producer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.bootstrap_servers}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Producer: {e}")
            raise

    def send_message(
        self,
        topic: str,
        message: Dict[str, Any],
        key: Optional[str] = None,
        partition: Optional[int] = None,
        timestamp_ms: Optional[int] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫

        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            key: –ö–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
            partition: –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é)
            timestamp_ms: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            enriched_message = {
                'data': message,
                'metadata': {
                    'timestamp': datetime.now().isoformat(),
                    'producer_id': self.client_id,
                    'message_id': f"{self.client_id}_{datetime.now().timestamp()}"
                }
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            future = self.producer.send(
                topic=topic,
                value=enriched_message,
                key=key,
                partition=partition,
                timestamp_ms=timestamp_ms
            )

            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            record_metadata = future.get(timeout=10)

            self.logger.info(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ '{topic}' "
                f"(–ø–∞—Ä—Ç–∏—Ü–∏—è: {record_metadata.partition}, "
                f"offset: {record_metadata.offset})"
            )
            return True

        except KafkaError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Kafka –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def send_batch(
        self,
        topic: str,
        messages: List[Dict[str, Any]],
        key_field: Optional[str] = None
    ) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            key_field: –ü–æ–ª–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {'success': count, 'failed': count}
        """
        results = {'success': 0, 'failed': 0}

        for message in messages:
            key = None
            if key_field and key_field in message:
                key = str(message[key_field])

            if self.send_message(topic, message, key=key):
                results['success'] += 1
            else:
                results['failed'] += 1

        self.logger.info(
            f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
            f"—É—Å–ø–µ—à–Ω–æ: {results['success']}, "
            f"–æ—à–∏–±–æ–∫: {results['failed']}"
        )

        return results

    def flush(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.producer.flush()
            self.logger.info("üîÑ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—É—Ñ–µ—Ä–∞: {e}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Kafka"""
        try:
            self.producer.close()
            self.logger.info("üîí Kafka Producer –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Producer: {e}")

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.close()


