"""
Kafka Consumer Client –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka
"""

import json
import logging
from typing import Dict, Any, List, Optional, Callable
from datetime import datetime
from kafka import KafkaConsumer
from kafka.errors import KafkaError


class KafkaConsumerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka"""

    def __init__(
        self,
        bootstrap_servers: List[str] = None,
        client_id: str = "jira-kafka-consumer",
        group_id: str = "jira-consumer-group",
        **kwargs
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka Consumer

        Args:
            bootstrap_servers: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Kafka (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ['localhost:9092'])
            client_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            group_id: ID –≥—Ä—É–ø–ø—ã –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è KafkaConsumer
        """
        self.bootstrap_servers = bootstrap_servers or ['localhost:9092']
        self.client_id = client_id
        self.group_id = group_id

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            'bootstrap_servers': self.bootstrap_servers,
            'client_id': self.client_id,
            'group_id': self.group_id,
            'value_deserializer': lambda x: json.loads(x.decode('utf-8')),
            'key_deserializer': lambda x: x.decode('utf-8') if x else None,
            'auto_offset_reset': 'latest',  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            'enable_auto_commit': True,     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            'auto_commit_interval_ms': 1000,
            'session_timeout_ms': 30000,
            'heartbeat_interval_ms': 10000,
            'max_poll_records': 500,       # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω poll
            'consumer_timeout_ms': 1000,   # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏
        config = {**default_config, **kwargs}

        try:
            self.consumer = KafkaConsumer(**config)
            self.logger.info(f"‚úÖ Kafka Consumer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.bootstrap_servers}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Consumer: {e}")
            raise

    def subscribe(self, topics: List[str]):
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏

        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            self.consumer.subscribe(topics)
            self.logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏: {topics}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏: {e}")
            raise

    def poll(self, timeout_ms: int = 1000) -> Dict[str, List[Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–æ–≤

        Args:
            timeout_ms: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            Dict —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ —Ç–æ–ø–∏–∫–∞–º
        """
        try:
            message_pack = self.consumer.poll(timeout_ms=timeout_ms)

            if message_pack:
                self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(len(msgs) for msgs in message_pack.values())}")

            return message_pack

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return {}

    def get_messages(
        self,
        topics: List[str],
        count: int = 10,
        timeout_ms: int = 5000
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            timeout_ms: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        messages = []

        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
            self.subscribe(topics)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            while len(messages) < count:
                message_pack = self.poll(timeout_ms)

                if not message_pack:
                    break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for topic_partition, message_list in message_pack.items():
                    for message in message_list:
                        if len(messages) >= count:
                            break

                        message_data = {
                            'topic': topic_partition.topic,
                            'partition': topic_partition.partition,
                            'offset': message.offset,
                            'key': message.key,
                            'value': message.value,
                            'timestamp': message.timestamp,
                            'headers': dict(message.headers) if message.headers else {}
                        }

                        messages.append(message_data)

            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return messages

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

    def consume_messages(
        self,
        topics: List[str],
        message_handler: Callable[[Dict[str, Any]], None],
        timeout_ms: int = 1000
    ):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            message_handler: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            timeout_ms: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏
            self.subscribe(topics)

            self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–æ–≤: {topics}")

            while True:
                message_pack = self.poll(timeout_ms)

                if message_pack:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    for topic_partition, message_list in message_pack.items():
                        for message in message_list:
                            message_data = {
                                'topic': topic_partition.topic,
                                'partition': topic_partition.partition,
                                'offset': message.offset,
                                'key': message.key,
                                'value': message.value,
                                'timestamp': message.timestamp,
                                'headers': dict(message.headers) if message.headers else {}
                            }

                            try:
                                message_handler(message_data)
                            except Exception as e:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    def get_latest_messages(
        self,
        topic: str,
        count: int = 10
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞

        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π consumer —Å offset reset –Ω–∞ earliest
            temp_consumer = KafkaConsumer(
                topic,
                bootstrap_servers=self.bootstrap_servers,
                auto_offset_reset='latest',
                enable_auto_commit=False,
                value_deserializer=lambda x: json.loads(x.decode('utf-8')),
                key_deserializer=lambda x: x.decode('utf-8') if x else None,
                consumer_timeout_ms=1000
            )

            messages = []
            message_count = 0

            for message in temp_consumer:
                if message_count >= count:
                    break

                message_data = {
                    'topic': message.topic,
                    'partition': message.partition,
                    'offset': message.offset,
                    'key': message.key,
                    'value': message.value,
                    'timestamp': message.timestamp,
                    'headers': dict(message.headers) if message.headers else {}
                }

                messages.append(message_data)
                message_count += 1

            temp_consumer.close()
            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ '{topic}'")
            return messages

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

    def list_topics(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–ø–∏–∫–æ–≤
        """
        try:
            metadata = self.consumer.list_consumer_group_offsets()
            topics = self.consumer.topics()
            topic_list = list(topics)

            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(topic_list)}")
            return topic_list

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤: {e}")
            return []

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Kafka"""
        try:
            self.consumer.close()
            self.logger.info("üîí Kafka Consumer –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Consumer: {e}")

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.close()


