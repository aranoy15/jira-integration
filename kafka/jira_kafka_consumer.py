"""
–ü—Ä–æ—Å—Ç–æ–π Kafka Consumer –¥–ª—è Jira –∑–∞–¥–∞—á (issues)
"""

import logging
from typing import Dict, Any, List, Optional, Callable
from kafka_consumer import KafkaConsumerClient


class JiraKafkaConsumer:
    """–ü—Ä–æ—Å—Ç–æ–π Consumer –¥–ª—è —á—Ç–µ–Ω–∏—è Jira –∑–∞–¥–∞—á –∏–∑ Kafka"""

    def __init__(
        self,
        bootstrap_servers: List[str] = None,
        client_id: str = "jira-kafka-consumer",
        group_id: str = "jira-consumer-group"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Jira Consumer

        Args:
            bootstrap_servers: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ Kafka
            client_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
            group_id: ID –≥—Ä—É–ø–ø—ã –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤
        """
        self.consumer = KafkaConsumerClient(
            bootstrap_servers=bootstrap_servers,
            client_id=client_id,
            group_id=group_id
        )

        # –¢–æ–ø–∏–∫ –¥–ª—è –∑–∞–¥–∞—á
        self.issues_topic = 'jira-issues'

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def get_issue_events(
        self,
        count: int = 10,
        issue_key: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º

        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            issue_key: –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º
        """
        try:
            messages = self.consumer.get_messages([self.issues_topic], count)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if issue_key:
                messages = [
                    msg for msg in messages
                    if msg.get('value', {}).get('issue', {}).get('key') == issue_key
                ]

            self.logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º")
            return messages

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º: {e}")
            return []

    def get_latest_issue_events(
        self,
        count: int = 10
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º

        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º
        """
        try:
            messages = self.consumer.get_latest_messages(self.issues_topic, count)
            self.logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º")
            return messages

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º: {e}")
            return []

    def consume_issue_events(
        self,
        issue_handler: Callable[[Dict[str, Any]], None],
        issue_key: Optional[str] = None
    ):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º

        Args:
            issue_handler: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞—á–∞–º
            issue_key: –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏
        """
        def filtered_handler(message_data):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if issue_key:
                issue_data = message_data.get('value', {}).get('issue', {})
                if issue_data.get('key') != issue_key:
                    return

            issue_handler(message_data)

        self.consumer.consume_messages([self.issues_topic], filtered_handler)

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.consumer.close()

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.close()


